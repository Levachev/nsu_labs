import lingo/pegcode/driver;
import lingo/peg;
import lingo/linecolumn;
import text/deserialize_string;
import lingo/pegaction;
import ds/hashmap;

    ArExpr ::= ArSum, ArMul, ArDif, ArDiv, ArInt, ArVar, ArUnar;
        ArSum(lhs : ArExpr, rhs : ArExpr);
        ArMul(lhs : ArExpr, rhs : ArExpr);
        ArDif(lhs : ArExpr, rhs : ArExpr);
        ArDiv(lhs : ArExpr, rhs : ArExpr);
        ArUnar(S : ArExpr);
        ArInt(val : int);
        ArVar(val : string);

    s2ar(str : string) -> ArExpr{
        e_gr = "#include grammar3.lingo";
        parsic(
            compilePegGrammar(e_gr),
            str,
            SemanticActions(setTree(defaultPegActions.t, "CreateString", \s ->s[0]))
        )
    }

    
    Mnoj : (digit : int, result : HashMap<string, int>);
    Viraj : (value : HashMap<HashMap<string, int>, int>);

    printMap(map : HashMap<string, int>)->void{
        iterHashMap(map, \key, val->println(key+" "+i2s(val)));
    }

    mulDefault(val1:Mnoj, val2:Mnoj) ->Mnoj{
        result1 = val1.result;
        result2 = val2.result;

        mergeHashMapCustom(result1, result2, \key, v1, v2->v1+v2);

        tmp = Mnoj((val1.digit*val2.digit), result1);
        if(tmp.digit==0){
            Mnoj(0, makeHashMap(\str->1));
        } else{
            tmp;
        }
    }

    printMnoj(v:Mnoj) ->void{
        println("digit "+i2s(v.digit));
        printMap(v.result);
    }

    mulVir(vir1:Viraj, vir2:Viraj) -> Viraj{
        // println("mul");
        // printVir(vir1);
        // printVir(vir2);

        map1 = vir1.value;
        map2 = vir2.value;
        // println("size 1 "+i2s(sizeHashMap(map1)));
        // println("size 2 "+i2s(sizeHashMap(map2)));

        result = foldHashMap(map1, getZeroViraj(), \key1,val1,res1 ->{
            
            retVal2 = foldHashMap(map2, getZeroViraj(), \key2,val2,res2 ->{
                obert1 = copyHashMap(key1);
                obert2 = copyHashMap(key2);
                
                v1 = Mnoj(val1, obert1);
                v2 = Mnoj(val2, obert2);
                // println("");
                // println("");
                // printMnoj(v1);
                // println("");
                // printMnoj(v2);
                // println("");
                // println("");

                // println("before1");
                // printVir(vir1);
                // printVir(vir2);
                
                tmp2 = mulDefault(v1, v2);

                // printVir(vir1);
                // printVir(vir2);
                // println("after1");

                maptmp = makeHashMap(\str->1);
                setHashMap(maptmp, tmp2.result, tmp2.digit);

                // printMnoj(v1);
                // printMnoj(v2);
                // printVir(Viraj(maptmp));

                //mergeHashMapCustom(res1, maptmp, \key, vv1, vv2->(vv1+vv2));
                ///////////////////////////////
                // println("before");
                // printVir(vir1);
                // printVir(vir2);
                check = sumVir(Viraj(maptmp), res2);
                // printVir(vir1);
                // printVir(vir2);
                // println("after");
                // println("check");
                // printVir(check);
                check;
            });
            sumVir(retVal2, res1);
        });
        // println("result");
        // printVir(result);
        // println("");
        result;
    }

    equalMap(m1:HashMap<string, int>, m2:HashMap<string, int>)->bool{
        ret = ref true;
        if(sizeHashMap(m1) != sizeHashMap(m2)){
            ret := false
        }
        iterHashMap(m1, \key,val->{
            tmp = lookupHashMap(m2, key);
            if(isNone(tmp)){
                ret := false
            } else{
                rez = either(tmp, -1);
                if(val==rez){

                } else{
                    ret := false
                }
            }
        })
        ^ret;
    }

    hasKey(map:HashMap<HashMap<string, int>, int>, key:HashMap<string, int>)->bool{
        ret = ref false;
        iterHashMap(map, \key1,val->{
            if(equalMap(key,key1)){
                ret := true
            } else{

            }
        })
        ^ret;
    }

    getValByKey(map:HashMap<HashMap<string, int>, int>, key:HashMap<string, int>)->int{
        ret = ref -1;
        iterHashMap(map, \key1,val->{
            if(equalMap(key1,key)){
                ret := val
            } else{

            }
        })
        ^ret;
    }

    sumVir(val1:Viraj, val2:Viraj)->Viraj{
        // println("summ");
        // printVir(val1);
        // printVir(val2);

        map1 = val1.value;
        map2 = val2.value;

        rez1 = foldHashMap(map1, makeHashMap(\str->1), \key,val,result->{
            //println("rez1`1");
            if(hasKey(map2, key)){
                val22 = getValByKey(map2, key);
                setHashMap(result, key, (val+val22));
                result;
            } else{
                setHashMap(result, key, val);
                result;
            }
        });

        rez2 = foldHashMap(map2, makeHashMap(\str->1), \key,val,result->{
            //println("rez1`2");
            if(hasKey(map1, key)){
                //printMap(key);
                //println("rez1`2  in if");
                result;
            } else{
                //println("rez1`2  in esle");
                setHashMap(result, key, val);
                result;
            }
        });

        mergeHashMap(rez1, rez2);
        retur = Viraj(rez1);
        // println("retur");
        // printVir(retur);
        retur;
    }

    diffVir(val1:Viraj, val2:Viraj)->Viraj{
        map1 = val1.value;
        map2 = val2.value;

        rez1 = foldHashMap(map1, makeHashMap(\str->1), \key,val,result->{
            if(hasKey(map2, key)){
                val22 = getValByKey(map2, key);
                setHashMap(result, key, (val-val22));
                result;
            } else{
                setHashMap(result, key, val);
                result;
            }
        });

        rez2 = foldHashMap(map2, makeHashMap(\str->1), \key,val,result->{
            if(hasKey(map1, key)){
                result;
            } else{
                setHashMap(result, key, -1*val);
                result;
            }
        });
        mergeHashMap(rez1, rez2);
        Viraj(rez1);
    }

    mulDrob(val1:Pair<Viraj, Viraj>, val2:Pair<Viraj, Viraj>) ->Pair<Viraj, Viraj>{
        v1_ch = val1.first;
        v1_zn = val1.second;

        v2_ch = val2.first;
        v2_zn = val2.second;

        tmp = Pair(mulVir(v1_ch, v2_ch), mulVir(v1_zn, v2_zn));
        // println("mul");
        // printVir(tmp.first);
        tmp;
    }

    divDrob(val1:Pair<Viraj, Viraj>, val2:Pair<Viraj, Viraj>) ->Pair<Viraj, Viraj>{
        v1_ch = val1.first;
        v1_zn = val1.second;
        v2_ch = val2.first;
        v2_zn = val2.second;

        Pair(mulVir(v1_ch, v2_zn), mulVir(v1_zn, v2_ch));
    }

    summDrob(val1:Pair<Viraj, Viraj>, val2:Pair<Viraj, Viraj>) ->Pair<Viraj, Viraj>{
        v1_ch = val1.first;
        v1_zn = val1.second;

        v2_ch = val2.first;
        v2_zn = val2.second;


        if(equalsHashMap(v1_zn.value,v2_zn.value)){
            Pair(sumVir(v1_ch,v2_ch), v1_zn);
        } else{
            tmp = Pair(sumVir(mulVir(v1_ch, v2_zn), mulVir(v2_ch, v1_zn)), mulVir(v1_zn, v2_zn));
            // println("summ");
            // printVir(tmp.first);
            tmp;
        }        
    }

    printViraj(vir : Viraj)->void{
        map = vir.value;
        iterHashMap(map, \k,v->{
            println("!!!");
            println("key");
            printMap(k);
            println("key2");
            println(i2s(v));
            println("!!!");
        })
    }

    diffDrob(val1:Pair<Viraj, Viraj>, val2:Pair<Viraj, Viraj>) ->Pair<Viraj, Viraj>{
        v1_ch = val1.first;
        v1_zn = val1.second;

        v2_ch = val2.first;
        v2_zn = val2.second;

        if(v1_zn == v2_zn){
            Pair(diffVir(v1_ch,v2_ch), v1_zn);
        } else{
            tmp = Pair(diffVir(mulVir(v1_ch, v2_zn), mulVir(v2_ch, v1_zn)), mulVir(v1_zn, v2_zn));
            // println("diff");
            // printVir(tmp.first);
            tmp;
        }        
    }

    getSign(val:int)->int{
        if(val<0){
            -1;
        } else{
            1
        }
    }

    getOneViraj() ->Viraj{
        tmp = makeHashMap(\str->1);

        result1 = makeHashMap(\str->1);
        setHashMap(result1, tmp, 1);

        Viraj(result1);
    }

    getZeroViraj() ->Viraj{
        tmp = makeHashMap(\str->1);

        result1 = makeHashMap(\str->1);
        setHashMap(result1, tmp, 0);

        Viraj(result1);
    }

    createInt(val:int) ->Pair<Viraj,Viraj>{
        tmp = makeHashMap(\str->1);

        result1 = makeHashMap(\str->1);
        setHashMap(result1, tmp, val);

        Pair(Viraj(result1),getOneViraj());
    }

    createVar(val:string) ->Pair<Viraj,Viraj>{
        tmp = makeHashMap(\str->1);
        setHashMap(tmp, val, 1);

        result1 = makeHashMap(\str->1);
        setHashMap(result1, tmp, 1);

        Pair(Viraj(result1),getOneViraj());
    }

    ar2drob(e : ArExpr) -> Pair<Viraj,Viraj>{
        switch (e) {
            ArSum(lhs, rhs): summDrob(ar2drob(rhs), ar2drob(lhs));
            ArDif(lhs, rhs): diffDrob(ar2drob(lhs), ar2drob(rhs));
            ArMul(lhs, rhs): mulDrob(ar2drob(lhs), ar2drob(rhs));
            ArDiv(lhs, rhs): divDrob(ar2drob(lhs), ar2drob(rhs));
            ArInt(val): createInt(val);
            ArVar(val): createVar(val);
            ArUnar(val): mulDrob(createInt(-1), ar2drob(val));
        }
    }

    getKey(map:HashMap<string, int>)->string{
        foldHashMap(map, "", \key,v,str->{
        if(v==0){
            str;
        } else if(v==1){
            str+key;
        } else{
            str+key+"^"+i2s(v);
        }
        })
    }

    printVir(val:Viraj)->string{
        ret = ref true;
        char = ref "";
        tmp = foldHashMap(val.value, "", \key,v,str->{
            keyV = getKey(key);
            if(v==0){
                str;
            } else if(v==1){
                rezz=str+^char+keyV;
                if(^ret){
                    char := "+";
                    ret := false;
                }
                rezz;
            } else if(v<0){
                rezz=str+i2s(v)+keyV;
                if(^ret){
                    char := "+";
                    ret := false;
                }
                rezz;
            } else{
               rezz=str+^char+i2s(v)+"*"+keyV;
                if(^ret){
                    char := "+";
                    ret := false;
                }
                rezz;
            }
        })
        if(strlen(tmp)==0){
            "0";
        } else{
            tmp;
        }
    }

    hasKey2(m1:HashMap<string, int>, key:string)->bool{
        tmp = lookupHashMap(m1, key);
        !isNone(tmp);
    }

    reduse(pair:Pair<Viraj,Viraj>, red:string)->Pair<Viraj,Viraj>{
        m1 = pair.first.value;
        m2 = pair.second.value;
        iterHashMap(m1, \k,v->{
            tmp = either(lookupHashMap(k, red), -1);
            setHashMap(k, red, tmp-1);
        })
        iterHashMap(m2, \k2,v2->{
            tmp2 = either(lookupHashMap(k2, red), -1);
            setHashMap(k2, red, tmp2-1);
        })

        Pair(Viraj(m1), Viraj(m2));
    }

    canReduse(pair:Pair<Viraj,Viraj>)->Pair<[string],bool>{
        m1 = hashMapKeys(pair.first.value);
        m2 = hashMapKeys(pair.second.value);
        m = concat(m1, m2);
        ekz = m1[0];
        if(sizeHashMap(ekz)==0){
            println("in if");
            Pair([], false);
        } else{
            println("in else");
            canSokr = foldHashMap(ekz, [], \k,v,povtor->{
                println("k - "+k);
                ret = ref true;
                iter(m, \val->{
                    if(sizeHashMap(val)==0){
                    } else{
                        if(hasKey2(val, k)){
                        } else{
                            ret := false;
                        }
                    }
                })
                if(^ret == true){
                    arrayPush(povtor, k);
                } else{
                    povtor;
                }
            })
            // println("size "+i2s(length(canSokr)));
            // iter(canSokr, \val->{
            //     println("can "+val);
            // })
            if(length(canSokr)==0){
                Pair([], false);
            } else{
                Pair(canSokr, true);
            }
        }
    }

    createZamen(map:HashMap<string, string>)->[string]{
        foldHashMap(map, [], \k,v,r->{
            // if(strlen(k)==1 && strlen(v)>1){
            //     arrayPush(arrayPush(r,k),"("+v+")");
            // } else if(strlen(k)>1 && strlen(v)==1){
            //     arrayPush(arrayPush(r,k), v);
            // } else{
            //     arrayPush(arrayPush(r,k),v);
            // }
            arrayPush(arrayPush(r,k),v);
        })
    }

    doZamen(value:string, map:HashMap<string, string>)->string{
        zamen=createZamen(map);
        strReplaces(value, zamen);
    }

    allZamen(value:string, map:HashMap<string, string>)->string{
        tmp = doZamen(value, map);
        println("");
        println(value);
        println(tmp);
        println("");
        if(tmp == value){
            println("in if end");
            value;
        } else{
            allZamen(tmp, map);
        }
    }


    main() {
    //expr = "((y+x)*(y-x))";
    //expr = "((y+x)*(y+x))";
    //expr = "(((y+x)*(y+x))*(y+x))";
    //expr = "(((((y+x)/(y-x))+(1/(x+y)))/x)+1)";

    expr = "((((x*y)+(2*y))+y)/(((2*x)*x)+((3*x)*x)))";
    //expr = "(1*(x-y))";
    //expr = "((((x*x)-x)*y)/(x*y))";

    //expr = "(((y*y)+(x*x))+(x-y))";
    map = makeHashMap(\str->1);

    setHashMap(map, "x", "(y*y)");
    setHashMap(map, "(3*(y*y))", "2");

    expr2 = allZamen(expr, map);
    //expr2 = expr;

    println(expr);
    println(expr2);

    tmp = ar2drob(s2ar(expr2));
    println(printVir(tmp.first));
    println("/");
    println(printVir(tmp.second));

    //tmp2 = canReduse(tmp);

    // if(tmp2.second){
    //     val = tmp2.first[0];

    //     wer=reduse(tmp, val);
    //     println(printVir(wer.first));
    //     println("/");
    //     println(printVir(wer.second));

    // } else{
    //     println(printVir(tmp.first));
    //     println("/");
    //     println(printVir(tmp.second));
    // }
    quit(0);
}