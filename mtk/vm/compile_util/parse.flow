import lingo/pegcode/driver;
import grammar/grammar;


export {

    parse(program: string) -> flow;
    
}


buildVarDeclList(a: [flow]) {
    VarDeclList(a[0]);
}


buildTrueConst(a: [flow]) {
    BoolConst(true);
}


buildFalseConst(a: [flow]) {
    BoolConst(false);
}


buildArrayConst(a: [flow]) {
    if (length(a) == 0) {
        ArrayConst(makeTree());
    } else {
        values = concat(a[0], a[1]);
        treeOfValues = foldi(values, makeTree(), \i, acc, v -> setTree(acc, i, v));
        ArrayConst(treeOfValues);
    }
}


buildArithmSub(a: [flow]) {
    fold(a[1], a[0], \acc, e -> ArithmBinary(acc, e, ArithmSubOp()))
}


buildArithmDiv(a: [flow]) {
    fold(a[1], a[0], \acc, e -> ArithmBinary(acc, e, ArithmDivOp()))
}


buildExprsLess(e1: Expr, e2: Expr) {
    Comparison(e1, e2, Less());
}


buildExprsEqual(e1: Expr, e2: Expr) {
    Comparison(e1, e2, Equal());
}


buildLess(a: [flow]) {
    buildExprsLess(a[0], a[1]);
}


buildEqual(a: [flow]) {
    buildExprsEqual(a[0], a[1]);
}


buildLessOrEqual(a: [flow]) {
    t1 = a[0];
    t2 = a[1];
    Or(buildExprsEqual(t1, t2), buildExprsLess(t1, t2));
}


buildGreater(a: [flow]) {
    buildExprsLess(a[1], a[0]);
}


buildGreaterOrEqual(a: [flow]) {
    t1 = a[0];
    t2 = a[1];
    Or(buildExprsEqual(t1, t2), buildExprsLess(t2, t1));
}


buildNotEqual(a: [flow]) {
    Not(buildExprsEqual(a[0], a[1]));
}


buildBodiesSeq(a: [flow]) {
    BodiesSeq(a[0]);
}


buildNonDeterChoice(a: [flow]) {
    NonDeterChoice(concat([a[0]], a[1]));
}


specialPegActions = {
    actions : [Pair<string, ([flow]) -> flow>] = [
        Pair("buildVarDeclList", buildVarDeclList),
        Pair("buildTrueConst", buildTrueConst),
        Pair("buildFalseConst", buildFalseConst),
        Pair("buildArrayConst", buildArrayConst),
        Pair("buildArithmSub", buildArithmSub),
        Pair("buildArithmDiv", buildArithmDiv),
        Pair("buildLess", buildLess),
        Pair("buildEqual", buildEqual),
        Pair("buildLessOrEqual", buildLessOrEqual),
        Pair("buildGreater", buildGreater),
        Pair("buildGreaterOrEqual", buildGreaterOrEqual),
        Pair("buildNotEqual", buildNotEqual),
        Pair("buildBodiesSeq", buildBodiesSeq),
        Pair("buildNonDeterChoice", buildNonDeterChoice),
    ];

    SemanticActions(fold(
        actions, defaultPegActions.t, \acc, p -> {
            setTree(acc, p.first, p.second);
        }
    ));
}


parse(program: string) -> flow {
    grammar = compilePegGrammar("#include lingo/nemo.lingo");
    parsic(grammar, program, specialPegActions);
}
